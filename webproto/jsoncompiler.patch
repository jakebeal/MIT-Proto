Index: src/compiler/paleocompiler.cpp
===================================================================
--- src/compiler/paleocompiler.cpp	(revision 661)
+++ src/compiler/paleocompiler.cpp	(working copy)
@@ -2809,31 +2809,34 @@
 FILE* dump_target=stdout;
 void dump_instructions (int is_c, int n, uint8_t *bytes) {
   int j;
-  if (is_c) { fprintf(dump_target,"uint8_t script[] = {"); }
+  if (is_c) { fprintf(dump_target,"{ \"script\" : \n  ["); }
   for (j = 0; j < n; j++) {
     int i;
     char *name, opname[100];
     uint8_t code = bytes[j];
     AST_OP* op = lookup_op_by_code(code, &name);
     if (op == NULL) uerror("NULL OP %d", code);
-    if (is_c && j != 0) fprintf(dump_target,",");
-    fprintf(dump_target," %s", is_c ? xlate_opname(opname, name) : name);
+    if (is_c && j != 0) fprintf(dump_target,",\n");
+    fprintf(dump_target," \"%s\"", is_c ? xlate_opname(opname, name) : name);
     if (op->arity < 0) {
       for (i = 0; i < (-op->arity)+op->is_nary;) {
-        if (is_c) fprintf(dump_target,",");
+        if (is_c) fprintf(dump_target,",\n");
         j += 1;
-        fprintf(dump_target," %d", bytes[j]);
+        fprintf(dump_target," \"%d\"", bytes[j]);
         if (!(bytes[j] & 0x80)) i++;
       }
     } else {
       for (i = 0; i < op->arity+op->is_nary; i++) {
-        if (is_c) fprintf(dump_target,",");
+        if (is_c) fprintf(dump_target,",\n");
         j += 1;
-        fprintf(dump_target," %d", bytes[j]);
+        fprintf(dump_target," \"%d\"", bytes[j]);
       }
     }
   }
-  if (is_c) { fprintf(dump_target," };\n"); fprintf(dump_target,"uint16_t script_len = %d;", n); }
+  if (is_c) { 
+     fprintf(dump_target,"]\n}\n"); 
+     //fprintf(dump_target,"uint16_t script_len = %d;", n); 
+  }
   fprintf(dump_target,"\n");
 }
 
